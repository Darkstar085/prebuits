name: Build and Release

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths-ignore: ["*.md", "*.txt"]
  schedule:
    - cron: "30 4 * * *" # 10:00 AM IST

concurrency:
  group: prebuilts-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-release:
    runs-on: ubuntu-latest
    env:
      ACCESS_TOKEN: ${{ secrets.TOKEN }}
      VIA_URL: "https://res.viayoo.com/v1/via-release.apk"
      DOTGALLERY_REPO: "IacobIonut01/Gallery"
      DUCKDUCKGO_REPO: "duckduckgo/Android"
      KEYBOARD_REPO: "FossifyOrg/Keyboard"
      REVANCED_REPO: "j-hc/revanced-magisk-module"
      MICROG_REPO: "ReVanced/GmsCore"
      WEATHERMASTER_REPO: "PranshulGG/WeatherMaster"
      MICROG_RE_REPO: "WSTxda/MicroG-RE"
      CROMITE_REPO: "uazo/cromite"
      SYMPHONY_REPO: "zyrouge/symphony"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: adopt
          java-version: "11"

      - name: Install aapt and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y aapt jq

      - name: Download Via
        run: curl -L -o Via.apk "${{ env.VIA_URL }}"

      - name: Download DotGallery (arm64-v8a)
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.DOTGALLERY_REPO }}
          latest: true
          fileName: "*arm64-v8a*.apk"

      - name: Remove DotGallery nomaps
        run: rm -f *nomaps*.apk || true

      - name: Download DuckDuckGo
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.DUCKDUCKGO_REPO }}
          latest: true
          fileName: "*.apk"

      - name: Download Keyboard
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.KEYBOARD_REPO }}
          latest: true
          fileName: "*.apk"

      - name: Download ReVanced APKs
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.REVANCED_REPO }}
          latest: true
          fileName: "*.apk"

      - name: Download ReVanced MicroG (signed)
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.MICROG_REPO }}
          latest: true
          fileName: "*signed.apk"

      - name: Remove hw-signed MicroG
        run: rm -f *hw-signed*.apk || true

      - name: Download WeatherMaster APK
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.WEATHERMASTER_REPO }}
          latest: true
          fileName: "*arm64-v8a*.apk"

      - name: Download MicroG RE APK
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.MICROG_RE_REPO }}
          latest: true
          fileName: "*.apk"

      - name: Download Cromite APK (arm64)
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.CROMITE_REPO }}
          latest: true
          fileName: "arm64_ChromePublic.apk"

      - name: Download Symphony APK
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.SYMPHONY_REPO }}
          latest: true
          fileName: "*.apk"

      - name: Version and rename APKs (compare against latest-apk-versions.txt)
        id: versioning
        run: |
          set -e
          UPDATED_APPS=""

          declare -A OLD
          if [ -f latest-apk-versions.txt ]; then
            while IFS=: read -r app ver; do
              app="$(echo "$app" | xargs)"
              ver="$(echo "$ver" | xargs)"
              [ -z "$app" ] && continue
              OLD["$app"]="$ver"
            done < latest-apk-versions.txt
          fi

          declare -A apps=(
            ["Via.apk"]="Via"
            ["*Gallery*arm64-v8a*.apk"]="DotGallery"
            ["duckduckgo*.apk"]="DuckDuckGo"
            ["keyboard*.apk"]="Fossify_Keyboard"
            ["googlephotos-revanced-*-arm64-v8a.apk"]="ReVanced_GooglePhotos"
            ["music-revanced-*-arm64-v8a.apk"]="ReVanced_YTMusic"
            ["spotify-revanced-*-all.apk"]="Spotify_Revanced"
            ["youtube-revanced-*-all.apk"]="ReVanced_YouTube"
            ["app.revanced.android.gms-*.apk"]="ReVanced_MicroG"
            ["WeatherMaster*.arm64-v8a-Standard.apk"]="WeatherMaster"
            ["microg*.apk"]="MicroG_RE"
            ["arm64_ChromePublic.apk"]="Cromite"
            ["symphony*.apk"]="Symphony"
          )

          for pattern in "${!apps[@]}"; do
            NEW_APK=$(ls $pattern 2>/dev/null | head -n 1 || true)
            APP=${apps[$pattern]}
            [ -z "$NEW_APK" ] && continue

            NEW_VER=$(aapt dump badging "$NEW_APK" | grep versionName | sed -E "s/.*versionName='([^']+)'.*/\1/")
            OLD_VER="${OLD[$APP]:-}"

            if [ -n "$OLD_VER" ] && [ "$OLD_VER" = "$NEW_VER" ]; then
              echo "$APP unchanged (v$NEW_VER) — skipping"
              rm -f "$NEW_APK"
              continue
            fi

            rm -f ${APP}_v*.apk 2>/dev/null || true

            NEW_FILE="${APP}_v${NEW_VER}.apk"
            mv "$NEW_APK" "$NEW_FILE"
            UPDATED_APPS+="$APP(v$NEW_VER) "
            echo "Will update $APP → v$NEW_VER (was: ${OLD_VER:-none})"
          done

          if [ -n "$UPDATED_APPS" ]; then
            echo "UPDATED_APPS=$UPDATED_APPS" >> $GITHUB_ENV
          else
            echo "UPDATED_APPS=" >> $GITHUB_ENV
          fi

      - name: Stop if no updates
        if: env.UPDATED_APPS == ''
        run: |
          echo "No updates found. Exiting."
          exit 0

      - name: Write latest versions and clean missing entries
        if: env.UPDATED_APPS != ''
        run: |
          CURRENT_APPS=()
          for apk in *_v*.apk; do
            APP="${apk%%_v*}"
            CURRENT_APPS+=("$APP")
          done

          declare -A LATEST

          if [ -f latest-apk-versions.txt ]; then
            while IFS=: read -r app ver; do
              app="$(echo "$app" | xargs)"
              ver="$(echo "$ver" | xargs)"
              [ -z "$app" ] && continue
              for current_app in "${CURRENT_APPS[@]}"; do
                if [[ "$app" == "$current_app" ]]; then
                  LATEST["$app"]="$ver"
                  break
                fi
              done
            done < latest-apk-versions.txt
          fi

          for apk in *_v*.apk; do
            APP="${apk%%_v*}"
            VER="$(echo "$apk" | sed -E "s/.*_v(.*)\.apk/\1/")"
            LATEST["$APP"]="$VER"
          done

          for app in "${!LATEST[@]}"; do
            echo "$app: ${LATEST[$app]}"
          done | sort > latest-apk-versions.txt

      - name: Commit latest versions
        if: env.UPDATED_APPS != ''
        env:
          GITHUB_TOKEN: ${{ env.ACCESS_TOKEN }}
        run: |
          set -e
          git config --local user.email "sipunkumar85@gmail.com"
          git config --local user.name "S I P U N"
          git add latest-apk-versions.txt
          git fetch origin main
          git checkout -B main
          git pull --rebase origin main || true
          git commit -m "Update latest APK versions list [ci skip]" || echo "No changes to commit"
          git push origin main

      - name: Fetch and update changelogs for updated apps
        if: env.UPDATED_APPS != ''
        run: |
          mkdir -p changelogs

          declare -A repos=(
            ["DotGallery"]="IacobIonut01/Gallery"
            ["DuckDuckGo"]="duckduckgo/Android"
            ["Fossify_Keyboard"]="FossifyOrg/Keyboard"
            ["ReVanced_MicroG"]="ReVanced/GmsCore"
            ["WeatherMaster"]="PranshulGG/WeatherMaster"
            ["MicroG_RE"]="WSTxda/MicroG-RE"
            ["Cromite"]="uazo/cromite"
            ["Symphony"]="zyrouge/symphony"
          )

          REVANCED_APPS=("ReVanced_GooglePhotos" "ReVanced_YouTube" "Spotify_Revanced" "ReVanced_YTMusic")

          for updated in $UPDATED_APPS; do
            APP="$(echo $updated | sed -E 's/(.*)\(v.*\)/\1/')"
            NEW_VER="$(echo $updated | sed -E 's/.*\(v(.*)\)/\1/')"

            if [ "$APP" = "Via" ]; then
              VERSION="$NEW_VER"
              CHANGELOG_FILE="changelogs/Via.txt"
              APK_URL="https://www.apkmirror.com/apk/tu-yafeng/via-browser-fast-light-geek-best-choice/"
              curl -s "$APK_URL" > via_tmp.html
              CHANGELOG=$(awk "/What.s new in Via Browser - Fast & Light ${VERSION}/,/<\/ul>/" via_tmp.html | sed -n '/<ul>/,/<\/ul>/p' | sed 's/<[^>]*>//g' | sed '/^$/d')
              rm -f via_tmp.html
              if [ -z "$CHANGELOG" ]; then
                CHANGELOG="Developer doesn't provided any updated info"
              fi
              if ! grep -q "### Version v${VERSION}" "$CHANGELOG_FILE"; then
                echo "" >> "$CHANGELOG_FILE"
                echo "### Version v${VERSION} - $(date '+%Y-%m-%d')" >> "$CHANGELOG_FILE"
                echo "$CHANGELOG" >> "$CHANGELOG_FILE"
              fi
              echo "APP_Via_CHANGELOG<<EOF" >> $GITHUB_ENV
              echo "Version v${VERSION} changelog:" >> $GITHUB_ENV
              echo "$CHANGELOG" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV

            elif printf "%s\n" "${REVANCED_APPS[@]}" | grep -qx "$APP"; then
              CHANGELOG_URL="https://github.com/ReVanced/revanced-patches/releases/latest"
              CHANGELOG_MD="See the latest patch changelog here: $CHANGELOG_URL"
              if [ -z "$CHANGELOG_MD" ]; then
                CHANGELOG_MD="Developer doesn't provided any updated info"
              fi
              CHANGELOG_FILE="changelogs/${APP}.txt"
              if ! grep -q "### Version v${NEW_VER}" "${CHANGELOG_FILE}"; then
                echo "" >> "${CHANGELOG_FILE}"
                echo "### Version v${NEW_VER} - $(date '+%Y-%m-%d')" >> "${CHANGELOG_FILE}"
                echo "$CHANGELOG_MD" >> "${CHANGELOG_FILE}"
              fi
              echo "APP_${APP}_CHANGELOG<<EOF" >> $GITHUB_ENV
              echo "$CHANGELOG_MD" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV

            else
              REPO="${repos[$APP]}"
              if [ -z "$REPO" ]; then
                CHANGELOG_BODY="Developer doesn't provided any updated info"
              else
                RELEASE_JSON=$(curl -s https://api.github.com/repos/$REPO/releases/latest)
                CHANGELOG_BODY=$(echo "$RELEASE_JSON" | jq -r '.body // empty')
                if [ -z "$CHANGELOG_BODY" ]; then
                  CHANGELOG_BODY="Developer doesn't provided any updated info"
                fi
              fi
              CHANGELOG_FILE="changelogs/${APP}.txt"
              if ! grep -q "### Version v${NEW_VER}" "$CHANGELOG_FILE"; then
                echo "" >> "$CHANGELOG_FILE"
                echo "### Version v$NEW_VER - $(date '+%Y-%m-%d')" >> "$CHANGELOG_FILE"
                echo "$CHANGELOG_BODY" >> "$CHANGELOG_FILE"
              fi
              echo "APP_${APP}_CHANGELOG<<EOF" >> $GITHUB_ENV
              echo "Version v$NEW_VER changelog:" >> $GITHUB_ENV
              echo "$CHANGELOG_BODY" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            fi
          done

      - name: Build release notes
        if: env.UPDATED_APPS != ''
        run: |
          declare -A app_versions
          for apk in *_v*.apk; do
            APP="${apk%%_v*}"
            VER="$(echo "$apk" | sed -E "s/.*_v(.*)\.apk/\1/")"
            app_versions["$APP"]="$VER"
          done

          order=("ReVanced_GooglePhotos" "ReVanced_YTMusic" "Spotify_Revanced" "ReVanced_YouTube" "DuckDuckGo" "Fossify_Keyboard" "Via" "ReVanced_MicroG" "DotGallery" "WeatherMaster" "MicroG_RE" "Cromite" "Symphony")

          NOTES=""

          for key in "${order[@]}"; do
            if [[ -n "${app_versions[$key]}" ]]; then
              NOTES+="$key: ${app_versions[$key]}"$'\n'
              var="APP_${key}_CHANGELOG"
              changelog="${!var}"
              if [[ -n "$changelog" ]]; then
                NOTES+="Changelog:\n$changelog\n"
              fi
              unset app_versions["$key"]
            fi
          done

          for app in $(printf "%s\n" "${!app_versions[@]}" | sort); do
            NOTES+="$app: ${app_versions[$app]}"$'\n'
            var="APP_${app}_CHANGELOG"
            changelog="${!var}"
            if [[ -n "$changelog" ]]; then
              NOTES+="Changelog:\n$changelog\n"
            fi
          done

          NOTES="$(echo "$NOTES" | sed '/^$/d')"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Build release name (IST)
        if: env.UPDATED_APPS != ''
        run: |
          export TZ=Asia/Kolkata
          echo "REL_NAME=Prebuilts Update - $(date +'%Y-%m-%d %H:%M %Z')" >> $GITHUB_ENV

      - name: Create Release
        if: env.UPDATED_APPS != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: prebuilts-${{ github.run_id }}
          name: ${{ env.REL_NAME }}
          body: ${{ env.RELEASE_NOTES }}
          files: |
            *_v*.apk
        env:
          GITHUB_TOKEN: ${{ env.ACCESS_TOKEN }}
