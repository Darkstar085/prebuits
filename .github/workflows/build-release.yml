name: Build and Release

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths-ignore: ["*.md", "*.txt"]
  schedule:
    - cron: "30 4 * * *" # 10:00 AM IST

concurrency:
  group: prebuilts-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-release:
    runs-on: ubuntu-latest
    env:
      ACCESS_TOKEN: ${{ secrets.TOKEN }}
      DOTGALLERY_REPO: "IacobIonut01/Gallery"
      DUCKDUCKGO_REPO: "duckduckgo/Android"
      KEYBOARD_REPO: "FossifyOrg/Keyboard"
      REVANCED_REPO: "j-hc/revanced-magisk-module"
      MICROG_REPO: "ReVanced/GmsCore"
      WEATHERMASTER_REPO: "PranshulGG/WeatherMaster"
      MICROG_RE_REPO: "WSTxda/MicroG-RE"
      CROMITE_REPO: "uazo/cromite"
      SYMPHONY_REPO: "zyrouge/symphony"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: adopt
          java-version: "11"

      - name: Install aapt
        run: |
          sudo apt-get update
          sudo apt-get install -y aapt

      - name: Download DotGallery (arm64-v8a)
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.DOTGALLERY_REPO }}
          latest: true
          fileName: "*arm64-v8a*.apk"

      - name: Remove DotGallery nomaps
        run: rm -f *nomaps*.apk || true

      - name: Download DuckDuckGo
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.DUCKDUCKGO_REPO }}
          latest: true
          fileName: "*.apk"

      - name: Download Keyboard
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.KEYBOARD_REPO }}
          latest: true
          fileName: "*.apk"

      - name: Download ReVanced APKs
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.REVANCED_REPO }}
          latest: true
          fileName: "*.apk"

      - name: Download ReVanced MicroG (signed)
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.MICROG_REPO }}
          latest: true
          fileName: "*signed.apk"

      - name: Remove hw-signed MicroG
        run: rm -f *hw-signed*.apk || true

      - name: Download WeatherMaster APK
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.WEATHERMASTER_REPO }}
          latest: true
          fileName: "*arm64-v8a*.apk"

      - name: Download MicroG RE APK
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.MICROG_RE_REPO }}
          latest: true
          fileName: "*.apk"

      - name: Download Cromite APK (arm64)
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.CROMITE_REPO }}
          latest: true
          fileName: "arm64_ChromePublic.apk"

      - name: Download Symphony APK
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.SYMPHONY_REPO }}
          latest: true
          fileName: "*.apk"

      - name: Version and rename APKs
        id: versioning
        run: |
          set -e
          UPDATED_APPS=""
          declare -A OLD
          if [ -f latest-apk-versions.txt ]; then
            while IFS=: read -r app ver; do
              app="$(echo "$app" | xargs)"
              ver="$(echo "$ver" | xargs)"
              [ -z "$app" ] && continue
              OLD["$app"]="$ver"
            done < latest-apk-versions.txt
          fi

          declare -A apps=(
            ["*Gallery*arm64-v8a*.apk"]="DotGallery"
            ["duckduckgo*.apk"]="DuckDuckGo"
            ["keyboard*.apk"]="Fossify_Keyboard"
            ["googlephotos-revanced-*-arm64-v8a.apk"]="ReVanced_GooglePhotos"
            ["music-revanced-*-arm64-v8a.apk"]="ReVanced_YTMusic"
            ["spotify-revanced-*-all.apk"]="Spotify_Revanced"
            ["youtube-revanced-*-all.apk"]="ReVanced_YouTube"
            ["app.revanced.android.gms-*.apk"]="ReVanced_MicroG"
            ["WeatherMaster*.arm64-v8a-Standard.apk"]="WeatherMaster"
            ["microg*.apk"]="MicroG_RE"
            ["arm64_ChromePublic.apk"]="Cromite"
            ["symphony*.apk"]="Symphony"
          )

          for pattern in "${!apps[@]}"; do
            NEW_APK=$(ls $pattern 2>/dev/null | head -n 1 || true)
            APP=${apps[$pattern]}
            [ -z "$NEW_APK" ] && continue

            NEW_VER=$(aapt dump badging "$NEW_APK" | grep versionName | sed -E "s/.*versionName='([^']+)'.*/\1/")
            OLD_VER="${OLD[$APP]:-}"

            if [ -n "$OLD_VER" ] && [ "$OLD_VER" = "$NEW_VER" ]; then
              echo "$APP unchanged (v$NEW_VER) ‚Äî skipping"
              rm -f "$NEW_APK"
              continue
            fi

            rm -f ${APP}_v*.apk 2>/dev/null || true

            NEW_FILE="${APP}_v${NEW_VER}.apk"
            mv "$NEW_APK" "$NEW_FILE"
            UPDATED_APPS+="$APP(v$NEW_VER) "
            echo "Will update $APP ‚Üí v$NEW_VER (was: ${OLD_VER:-none})"
          done

          if [ -n "$UPDATED_APPS" ]; then
            echo "UPDATED_APPS=$UPDATED_APPS" >> $GITHUB_ENV
          else
            echo "UPDATED_APPS=" >> $GITHUB_ENV
          fi

      - name: Stop if no updates
        if: env.UPDATED_APPS == ''
        run: |
          echo "No updates found. Exiting."
          exit 0

      - name: Write latest versions
        if: env.UPDATED_APPS != ''
        run: |
          declare -A LATEST
          if [ -f latest-apk-versions.txt ]; then
            while IFS=: read -r app ver; do
              app="$(echo "$app" | xargs)"
              ver="$(echo "$ver" | xargs)"
              [ -z "$app" ] && continue
              LATEST["$app"]="$ver"
            done < latest-apk-versions.txt
          fi
          for apk in *_v*.apk; do
            APP="${apk%%_v*}"
            VER="$(echo "$apk" | sed -E 's/.*_v(.*)\.apk/\1/')"
            LATEST["$APP"]="$VER"
          done
          for app in "${!LATEST[@]}"; do
            echo "$app: ${LATEST[$app]}"
          done | sort > latest-apk-versions.txt

      - name: Build release notes
        if: env.UPDATED_APPS != ''
        run: |
          declare -A old_versions
          if [ -f latest-apk-versions.txt ]; then
            while IFS=: read -r app ver; do
              app="$(echo "$app" | xargs)"
              ver="$(echo "$ver" | xargs)"
              [ -z "$app" ] && continue
              old_versions["$app"]="$ver"
            done < latest-apk-versions.txt
          fi

          declare -A new_versions
          for apk in *_v*.apk; do
            APP="${apk%%_v*}"
            VER="$(echo "$apk" | sed -E 's/.*_v(.*)\.apk/\1/')"
            new_versions["$APP"]="$VER"
          done

          NOTES=""
          for app in "${!new_versions[@]}"; do
            OLD="${old_versions[$app]}"
            NEW="${new_versions[$app]}"
            if [ -z "$OLD" ]; then
              NOTES+="$app: $NEW"$'\n'
            elif [ "$OLD" != "$NEW" ]; then
              NOTES+="$app: $OLD ‚Üí $NEW"$'\n'
            fi
          done

          if [ -z "$NOTES" ]; then
            NOTES="No app versions updated."
          fi

          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Build release name (IST)
        if: env.UPDATED_APPS != ''
        run: |
          export TZ=Asia/Kolkata
          echo "REL_NAME=Prebuilts Update - $(date +'%Y-%m-%d %H:%M %Z')" >> $GITHUB_ENV

      - name: Create release
        if: env.UPDATED_APPS != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: prebuilts-${{ github.run_id }}
          name: ${{ env.REL_NAME }}
          body: ${{ env.RELEASE_NOTES }}
          files: |
            *_v*.apk
        env:
          GITHUB_TOKEN: ${{ env.ACCESS_TOKEN }}

      - name: Generate captions.txt
        if: env.UPDATED_APPS != ''
        run: |
          declare -A app_desc=(
            ["DotGallery"]="Jetpack Compose-based photo gallery app"
            ["DuckDuckGo"]="Private, tracker-blocking Android browser"
            ["Fossify_Keyboard"]="Privacy-friendly keyboard"
            ["ReVanced_GooglePhotos"]="Google Photos (ReVanced) Patched with extra features"
            ["ReVanced_YouTube"]="YouTube (ReVanced) ‚Äì Ad-blocking and enhanced features"
            ["ReVanced_YTMusic"]="YouTube Music (ReVanced) ‚Äì Enriched playback features"
            ["Spotify_Revanced"]="Spotify (ReVanced) ‚Äì Modded Spotify with extra controls"
            ["ReVanced_MicroG"]="ReVanced MicroG ‚Äì Google sign-in bridge"
            ["WeatherMaster"]="Modern weather app with graphs"
            ["MicroG_RE"]="MicroG RE ‚Äì Enhanced Play Services emulator"
            ["Cromite"]="Bromite-based privacy browser"
            ["Symphony"]="Lightweight music player for Android 9+"
          )

          declare -A app_emoji=(
            ["Cromite"]="üåê"
            ["DuckDuckGo"]="üåê"
            ["DotGallery"]="üì∑"
            ["ReVanced_GooglePhotos"]="üì∑"
            ["Fossify_Keyboard"]="‚å®Ô∏è"
            ["ReVanced_YouTube"]="üé¨"
            ["ReVanced_YTMusic"]="üéµ"
            ["Spotify_Revanced"]="üé∂"
            ["WeatherMaster"]="‚òÅÔ∏è"
            ["Symphony"]="üéº"
            ["MicroG_RE"]="üß©"
            ["ReVanced_MicroG"]="üß©"
          )

          declare -A app_repo=(
            ["DotGallery"]="https://github.com/IacobIonut01/Gallery/releases/latest"
            ["DuckDuckGo"]="https://github.com/duckduckgo/Android/releases/latest"
            ["Fossify_Keyboard"]="https://github.com/FossifyOrg/Keyboard/releases/latest"
            ["ReVanced_GooglePhotos"]="https://github.com/j-hc/revanced-magisk-module/releases/latest"
            ["ReVanced_YouTube"]="https://github.com/j-hc/revanced-magisk-module/releases/latest"
            ["ReVanced_YTMusic"]="https://github.com/j-hc/revanced-magisk-module/releases/latest"
            ["Spotify_Revanced"]="https://github.com/j-hc/revanced-magisk-module/releases/latest"
            ["ReVanced_MicroG"]="https://github.com/ReVanced/GmsCore/releases/latest"
            ["WeatherMaster"]="https://github.com/PranshulGG/WeatherMaster/releases/latest"
            ["MicroG_RE"]="https://github.com/WSTxda/MicroG-RE/releases/latest"
            ["Cromite"]="https://github.com/uazo/cromite/releases/latest"
            ["Symphony"]="https://github.com/zyrouge/symphony/releases/latest"
          )

          rm -f captions.txt
          for apkfile in *_v*.apk; do
            FILE=$(basename "$apkfile")
            APP="${FILE%%_v*}"
            EMOJI="${app_emoji[$APP]:-üì¶}"
            DESC="${app_desc[$APP]:-No description available}"
            NEW_VER=$(echo "$FILE" | sed -E 's/.*_v(.*)\.apk/\1/')
            OLD_VER=""
            if [ -f latest-apk-versions.txt ]; then
              OLD_VER=$(grep "^$APP:" latest-apk-versions.txt | cut -d: -f2 | xargs || true)
            fi
            if [ -z "$OLD_VER" ]; then
              VERSION="üÜï Version ‚Äì $NEW_VER"
            else
              VERSION="üÜï Version ‚Äì $OLD_VER ‚Üí $NEW_VER"
            fi
            CHANGELOG="Changelog: <a href='${app_repo[$APP]}'>$APP</a>"
            echo "
            ${EMOJI} ${DESC}
            ${VERSION}
            üîó ${CHANGELOG}
            ----" >> captions.txt
          done

      - name: Commit latest versions and captions
        if: env.UPDATED_APPS != ''
        env:
          GITHUB_TOKEN: ${{ env.ACCESS_TOKEN }}
        run: |
          git config --local user.email "sipunkumar85@gmail.com"
          git config --local user.name "S I P U N"
          git add latest-apk-versions.txt captions.txt
          git commit -m "Update APK versions and Telegram captions [ci skip]" || echo "No changes to commit"
          git push origin main
