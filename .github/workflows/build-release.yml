name: Build and Release

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths-ignore: ['**.md','**.txt']
  schedule:
    - cron: '30 4 * * *'

concurrency:
  group: prebuilts-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-release:
    runs-on: ubuntu-latest
    env:
      ACCESS_TOKEN: ${{ secrets.TOKEN }}
      VIA_URL: "https://res.viayoo.com/v1/via-release.apk"
      DOTGALLERY_REPO: "IacobIonut01/Gallery"
      DUCKDUCKGO_REPO: "duckduckgo/Android"
      KEYBOARD_REPO: "FossifyOrg/Keyboard"
      REVANCED_REPO: "j-hc/revanced-magisk-module"
      MICROG_REPO: "ReVanced/GmsCore"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: adopt
          java-version: '11'

      - name: Install aapt
        run: sudo apt-get update && sudo apt-get install -y aapt

      - name: Download Via
        run: curl -L -o Via.apk "${{ env.VIA_URL }}"

      - name: Download DotGallery (arm64-v8a)
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.DOTGALLERY_REPO }}
          latest: true
          fileName: "*arm64-v8a*.apk"

      - name: Remove DotGallery nomaps
        run: rm -f *nomaps*.apk || true

      - name: Download DuckDuckGo
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.DUCKDUCKGO_REPO }}
          latest: true
          fileName: "*.apk"

      - name: Download Keyboard
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.KEYBOARD_REPO }}
          latest: true
          fileName: "*.apk"

      - name: Download ReVanced APKs
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.REVANCED_REPO }}
          latest: true
          fileName: "*.apk"

      - name: Download ReVanced MicroG (signed)
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.MICROG_REPO }}
          latest: true
          fileName: "*signed.apk"

      - name: Remove hw-signed MicroG
        run: rm -f *hw-signed*.apk || true

      - name: Version and rename APKs
        id: versioning
        run: |
          set -e
          UPDATED_APPS=""
          declare -A apps=(
            ["Via.apk"]="Via"
            ["IacobIonut01.Gallery*.apk"]="GooglePhotos"
            ["duckduckgo*.apk"]="DuckDuckGo"
            ["FossifyOrg.Keyboard*.apk"]="Keyboard"
            ["googlephotos-revanced-*-arm64-v8a.apk"]="GooglePhotos"
            ["music-revanced-*-arm64-v8a.apk"]="Music"
            ["spotify-revanced-*-all.apk"]="Spotify"
            ["youtube-revanced-*-all.apk"]="YouTube"
            ["app.revanced.android.gms-*.apk"]="ReVancedMicroG"
          )
          for pattern in "${!apps[@]}"; do
            NEW_APK=$(ls $pattern 2>/dev/null | head -n 1 || true)
            APP=${apps[$pattern]}
            [ -z "$NEW_APK" ] && continue
            VER=$(aapt dump badging "$NEW_APK" | grep versionName | sed -E "s/.*versionName='([^']+)'.*/\1/")
            NEW_FILE="${APP}_v${VER}.apk"
            if ls ${APP}_v*.apk >/dev/null 2>&1; then
              OLD_FILE=$(ls ${APP}_v*.apk | head -n 1)
              OLD_VER=$(aapt dump badging "$OLD_FILE" | grep versionName | sed -E "s/.*versionName='([^']+)'.*/\1/")
              if [ "$OLD_VER" = "$VER" ]; then
                rm -f "$NEW_APK"; continue
              else
                rm -f "$OLD_FILE"
              fi
            fi
            mv "$NEW_APK" "$NEW_FILE"
            UPDATED_APPS+="$APP(v$VER) "
          done
          if [ -n "$UPDATED_APPS" ]; then
            echo "UPDATED_APPS=$UPDATED_APPS" >> $GITHUB_ENV
          else
            echo "UPDATED_APPS=" >> $GITHUB_ENV
          fi

      - name: Stop if no updates
        if: env.UPDATED_APPS == ''
        run: echo "No updates found. Exiting."
        
      - name: Write latest versions
        if: env.UPDATED_APPS != ''
        run: |
          {
            echo "Latest Prebuilt APK Versions:"
            for apk in *_v*.apk; do
              APP="${apk%%_v*}"
              VER="$(echo "$apk" | sed -E "s/.*_v(.*)\.apk/\1/")"
              echo "$APP: $VER"
            done
          } > latest-apk-versions.txt
          sort -u -o latest-apk-versions.txt latest-apk-versions.txt

      - name: Commit latest versions
        if: env.UPDATED_APPS != ''
        env:
          GITHUB_TOKEN: ${{ env.ACCESS_TOKEN }}
        run: |
          set -e
          git config --local user.email "sipunkumar85@gmail.com"
          git config --local user.name "S I P U N"
          git add latest-apk-versions.txt
          git fetch origin main
          git checkout -B main
          git pull --rebase origin main || true
          git commit -m "Update latest APK versions list [ci skip]" || echo "No changes to commit"
          git push origin main

      - name: Build release notes
        if: env.UPDATED_APPS != ''
        run: |
          tmp="$(mktemp)"
          for apk in *_v*.apk; do
            APP="${apk%%_v*}"
            VER="$(echo "$apk" | sed -E "s/.*_v(.*)\.apk/\1/")"
            echo "${APP}:${VER}" >> "$tmp"
          done
          sort -t: -k1,1 "$tmp" | awk -F: '!seen[$1]{last[$1]=$0; seen[$1]=1; next}{last[$1]=$0} END{for(k in last)print last[k]}' | sort -t: -k1,1 > "${tmp}.dedup"
          order=("GooglePhotos" "Music" "Spotify" "YouTube" "DuckDuckGo" "Keyboard" "Via" "ReVancedMicroG")
          NOTES=""
          for key in "${order[@]}"; do
            line=$(grep -E "^${key}:" "${tmp}.dedup" || true)
            if [ -n "$line" ]; then
              app="${line%%:*}"; ver="${line#*:}"
              NOTES+="${app}: ${ver}"$'\n'
              grep -Ev "^${key}:" "${tmp}.dedup" > "${tmp}.left" || true
              mv "${tmp}.left" "${tmp}.dedup"
            fi
          done
          while IFS= read -r line; do
            [ -z "$line" ] && continue
            app="${line%%:*}"; ver="${line#*:}"
            NOTES+="${app}: ${ver}"$'\n'
          done < "${tmp}.dedup"
          NOTES="$(echo "$NOTES" | sed '/^$/d')"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Build release name (IST)
        if: env.UPDATED_APPS != ''
        run: |
          export TZ=Asia/Kolkata
          echo "REL_NAME=Prebuilts Update - $(date +'%Y-%m-%d %H:%M %Z')" >> $GITHUB_ENV

      - name: Create Release
        if: env.UPDATED_APPS != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: prebuilts-${{ github.run_id }}
          name: ${{ env.REL_NAME }}
          body: ${{ env.RELEASE_NOTES }}
          files: |
            *_v*.apk
        env:
          GITHUB_TOKEN: ${{ env.ACCESS_TOKEN }}

      - name: Package APKs and metadata for Telegram workflow
        if: env.UPDATED_APPS != ''
        run: |
          mkdir -p out && cp -f *_v*.apk out/
          echo "${{ env.REL_NAME }}" > out/release_name.txt
          echo "prebuilts-${{ github.run_id }}" > out/release_tag.txt
          printf "%s\n" "${{ env.RELEASE_NOTES }}" > out/release_notes.txt
          tar -czf telegram_payload.tgz -C out .
      - name: Upload artifact (telegram payload)
        if: env.UPDATED_APPS != ''
        uses: actions/upload-artifact@v4
        with:
          name: telegram-payload
          path: telegram_payload.tgz
          if-no-files-found: error
