name: Telegram Delivery

on:
  workflow_run:
    workflows: ["Build and Release"]
    types: [completed]

concurrency:
  group: prebuilts-telegram-${{ github.ref }}
  cancel-in-progress: true

jobs:
  send-telegram:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      API_ID: ${{ secrets.TELEGRAM_API_ID }}
      API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
      SESSION: ${{ secrets.TELEGRAM_SESSION }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip jq
          pip3 install telethon

      # -- Determine release tag --
      - name: Determine release tag
        id: tag
        run: echo "TAG=prebuilts-${{ github.event.workflow_run.id }}" >> $GITHUB_ENV

      # -- Fetch release assets --
      - name: Get release assets
        id: assets
        run: |
          url="https://api.github.com/repos/${{ github.repository }}/releases/tags/${TAG}"
          resp=$(curl -s -H "Accept: application/vnd.github+json" "$url" || true)

          if [ -z "$resp" ] || echo "$resp" | grep -q '"Not Found"'; then
            echo "✅ No release found. Exiting."
            exit 0
          fi

          echo "$resp" | jq -r '.assets[] | select(.name|test("_v.*\\.(apk|exe)$")) | [.name, .browser_download_url] | @tsv' > urls.tsv

          if [ ! -s urls.tsv ]; then
            echo "✅ No APPs found. Exiting."
            exit 0
          fi

      - name: Download APPs
        if: success() && hashFiles('urls.tsv') != ''
        run: |
          mkdir -p dl
          while IFS=$'\t' read -r name url; do
            curl -L -o "dl/$name" "$url"
          done < urls.tsv

      - name: Upload APPs to Telegram
        if: success() && hashFiles('dl/*') != ''
        run: |
          python3 - <<'PY'
          import os, glob, subprocess, re, asyncio
          from asyncio import Semaphore
          from telethon import TelegramClient
          from telethon.sessions import StringSession

          api_id = int(os.environ['API_ID'])
          api_hash = os.environ['API_HASH']
          session = os.environ['SESSION']
          bot_token = os.environ['TELEGRAM_TOKEN']
          chat_id = os.environ['TELEGRAM_CHAT_ID']
          if chat_id.lstrip('-').isdigit():
              chat = int(chat_id)
          else:
              chat = chat_id

          def normalize_name(name):
              base = re.split(r'_v|-v', name, maxsplit=1)[0]
              base = re.sub(r'[ .-]+', '', base.lower())
              return base

          captions = {}
          with open('captions.txt', encoding='utf-8') as f:
              blocks = f.read().strip().split('----')
              for block in blocks:
                  block = block.strip()
                  if not block:
                      continue
                  lines = block.splitlines()
                  match = re.search(r'File name</b> – ([^\n]+)', lines[0])
                  if match:
                      filename = match.group(1)
                      caption_without_file = "\n".join(lines[1:]).strip()
                      captions[normalize_name(filename)] = caption_without_file

          files = sorted(glob.glob('dl/*.apk') + glob.glob('dl/*.exe'))
          if not files:
              raise SystemExit(0)

          def find_caption(captions, filename):
              norm = normalize_name(filename)
              if norm in captions:
                  return captions[norm]
              for key in captions.keys():
                  if norm.startswith(key) or key.startswith(norm):
                      return captions[key]
              return ""

          # Send small files (<= 48MB) via Bot API
          for f in [x for x in files if os.path.getsize(x) <= 48 * 1024 * 1024]:
              base = os.path.basename(f)
              cap = find_caption(captions, base)
              subprocess.run([
                  "curl", "-s", "-X", "POST", f"https://api.telegram.org/bot{bot_token}/sendDocument",
                  "-F", f"chat_id={chat_id}",
                  "-F", f"document=@{f}",
                  "-F", f"caption={cap}",
                  "-F", "parse_mode=HTML"
              ], check=False)

          # Send large files (> 48MB) via Telethon
          large_files = [x for x in files if os.path.getsize(x) > 48 * 1024 * 1024]
          if large_files:
              sem = Semaphore(2)

              async def send_one(client, filepath):
                  async with sem:
                      base = os.path.basename(filepath)
                      caption = find_caption(captions, base)[:1024]
                      await client.send_file(chat, filepath, force_document=True, caption=caption, parse_mode="html")

              async def main():
                  async with TelegramClient(StringSession(session), api_id, api_hash) as client:
                      await asyncio.gather(*(send_one(client, f) for f in large_files))

              asyncio.run(main())
          PY
