name: Telegram Delivery

on:
  workflow_run:
    workflows: ["Build and Release"]
    types: [completed]

concurrency:
  group: prebuilts-telegram-${{ github.ref }}
  cancel-in-progress: true

jobs:
  send-telegram:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      API_ID: ${{ secrets.TELEGRAM_API_ID }}
      API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
      SESSION: ${{ secrets.TELEGRAM_SESSION }}
      GH_TOKEN: ${{ secrets.TOKEN }}

    steps:
      - name: Checkout repo to get captions.txt
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip jq
          pip3 install telethon

      - name: Download APKs from latest release
        run: |
          mkdir -p dl
          gh release download --repo "${{ github.repository }}" --pattern "*.apk" --dir dl

      - name: Upload APKs to Telegram using captions.txt
        run: |
          python3 - <<'PY'
          import os
          import glob
          import subprocess
          import re
          import asyncio
          from asyncio import Semaphore
          from telethon import TelegramClient
          from telethon.sessions import StringSession

          api_id = int(os.environ['API_ID'])
          api_hash = os.environ['API_HASH']
          session = os.environ['SESSION']
          bot_token = os.environ['TELEGRAM_TOKEN']
          chat_id = os.environ['TELEGRAM_CHAT_ID']
          if chat_id.lstrip('-').isdigit():
              chat = int(chat_id)
          else:
              chat = chat_id

          # Load captions into dict keyed by filename
          captions = {}
          with open('captions.txt', encoding='utf-8') as f:
              blocks = f.read().strip().split('----')
              for block in blocks:
                  block = block.strip()
                  if not block:
                      continue
                  lines = block.splitlines()
                  match = re.search(r'File name</b> – ([^\n]+)', lines[0])
                  if match:
                      filename = match.group(1)
                      captions[filename] = block

          files = sorted(glob.glob('dl/*_v*.apk'))
          if not files:
              raise SystemExit(0)

          # Send small files (≤ 48MB) via Telegram Bot API using curl
          for f in [x for x in files if os.path.getsize(x) <= 48 * 1024 * 1024]:
              base = os.path.basename(f)
              cap = captions.get(base, "")
              subprocess.run([
                  "curl", "-s", "-X", "POST", f"https://api.telegram.org/bot{bot_token}/sendDocument",
                  "-F", f"chat_id={chat_id}",
                  "-F", f"document=@{f}",
                  "-F", f"caption={cap}",
                  "-F", "parse_mode=HTML"
              ], check=False)

          # Send large files (> 48MB) via Telethon
          large_files = [x for x in files if os.path.getsize(x) > 48 * 1024 * 1024]

          if large_files:
              sem = Semaphore(2)

              async def send_one(client, filepath):
                  async with sem:
                      base = os.path.basename(filepath)
                      caption = captions.get(base, "")[:1024]
                      await client.send_file(chat, filepath, force_document=True, caption=caption, parse_mode="html")

              async def main():
                  async with TelegramClient(StringSession(session), api_id, api_hash) as client:
                      await asyncio.gather(*(send_one(client, f) for f in large_files))

              asyncio.run(main())
          PY