name: Update Prebuilt APKs

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '**.txt'
  schedule:
    - cron: '30 4 * * *'

jobs:
  update-apps:
    runs-on: ubuntu-latest

    env:
      ACCESS_TOKEN: ${{ secrets.TOKEN }}
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

      VIA_URL: "https://res.viayoo.com/v1/via-release.apk"
      DOTGALLERY_REPO: "IacobIonut01/Gallery"
      DUCKDUCKGO_REPO: "duckduckgo/Android"
      KEYBOARD_REPO: "FossifyOrg/Keyboard"
      REVANCED_REPO: "j-hc/revanced-magisk-module"
      MICROG_REPO: "ReVanced/GmsCore"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: "adopt"
          java-version: "11"

      - name: Install aapt
        run: sudo apt-get update && sudo apt-get install -y aapt

      # ---- Download APKs ----
      - name: Download Via Browser
        run: |
          curl -L -o Via.apk "${{ env.VIA_URL }}"

      - name: Download DotGallery arm64-v8a APK
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.DOTGALLERY_REPO }}
          latest: true
          fileName: "*arm64-v8a*.apk"

      - name: Remove nomaps APKs
        run: |
          rm -f *nomaps*.apk || true

      - name: Download DuckDuckGo APK
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.DUCKDUCKGO_REPO }}
          latest: true
          fileName: "*.apk"

      - name: Download Keyboard APK
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.KEYBOARD_REPO }}
          latest: true
          fileName: "*.apk"

      - name: Download ReVanced APKs
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.REVANCED_REPO }}
          latest: true
          fileName: "*.apk"

      - name: Download ReVanced MicroG (signed)
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ env.MICROG_REPO }}
          latest: true
          fileName: "*signed.apk"

      - name: Remove hw-signed MicroG
        run: |
          rm -f *hw-signed*.apk || true

      # ---- Process APKs ----
      - name: Update APKs with version check
        run: |
          set -e
          UPDATED_APPS=""
          COMMIT_MSG="prebuilts: Update"

          declare -A apps=(
            ["Via.apk"]="Via"
            ["IacobIonut01.Gallery*.apk"]="DotGallery"
            ["duckduckgo*.apk"]="DuckDuckGo"
            ["FossifyOrg.Keyboard*.apk"]="Keyboard"
            ["googlephotos-revanced-*-arm64-v8a.apk"]="GooglePhotosReVanced"
            ["music-revanced-*-arm64-v8a.apk"]="MusicReVanced"
            ["spotify-revanced-*-all.apk"]="SpotifyReVanced"
            ["youtube-revanced-*-all.apk"]="YouTubeReVanced"
            ["app.revanced.android.gms-*.apk"]="ReVancedMicroG"
          )

          for pattern in "${!apps[@]}"; do
            NEW_APK=$(ls $pattern 2>/dev/null | head -n 1 || true)
            APP_NAME=${apps[$pattern]}

            if [ -n "$NEW_APK" ]; then
              NEW_VER=$(aapt dump badging "$NEW_APK" | grep versionName | sed -E "s/.*versionName='([^']+)'.*/\1/")
              NEW_FILE="${APP_NAME}_v${NEW_VER}.apk"

              if ls ${APP_NAME}_v*.apk >/dev/null 2>&1; then
                OLD_FILE=$(ls ${APP_NAME}_v*.apk | head -n 1)
                OLD_VER=$(aapt dump badging "$OLD_FILE" | grep versionName | sed -E "s/.*versionName='([^']+)'.*/\1/")

                if [ "$OLD_VER" = "$NEW_VER" ]; then
                  echo "$APP_NAME already up to date (v$OLD_VER)"
                  rm -f "$NEW_APK"
                  continue
                else
                  echo "Updating $APP_NAME from v$OLD_VER → v$NEW_VER"
                  rm -f "$OLD_FILE"
                fi
              else
                echo "Adding new app $APP_NAME (v$NEW_VER)"
              fi

              mv "$NEW_APK" "$NEW_FILE"
              UPDATED_APPS+="$APP_NAME(v$NEW_VER) "
              COMMIT_MSG+=" $APP_NAME(v$NEW_VER)"
            fi
          done

          if [ -n "$UPDATED_APPS" ]; then
            echo "UPDATED_APPS=$UPDATED_APPS" >> $GITHUB_ENV
            echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_ENV
          else
            echo "No updates found."
            echo "UPDATED_APPS=" >> $GITHUB_ENV
            echo "COMMIT_MSG=" >> $GITHUB_ENV
          fi

      # ---- Commit and Push ----
      - name: Write latest versions to txt file
        if: env.UPDATED_APPS != ''
        run: |
          echo "Latest Prebuilt APK Versions:" > latest-apk-versions.txt
          for apk in *_v*.apk; do
            APP=$(echo "$apk" | cut -d'_' -f1)
            VER=$(echo "$apk" | sed -E "s/.*_v(.*)\.apk/\1/")
            echo "$APP: $VER" >> latest-apk-versions.txt
          done

      - name: Commit and push latest versions txt
        if: env.UPDATED_APPS != ''
        run: |
          set -e
          git config --local user.email "sipunkumar85@gmail.com"
          git config --local user.name "S I P U N"
          git add latest-apk-versions.txt
          # Ensure we are on main and up-to-date to avoid non-fast-forward
          git fetch origin main
          git checkout -B main
          git pull --rebase origin main || true
          git commit -m "Update latest APK versions list [ci skip]" || echo "No changes to commit"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ env.ACCESS_TOKEN }}

      # ---- Generate Release Notes ----
      - name: Generate Release Notes
        if: env.UPDATED_APPS != ''
        run: |
          NOTES="### Prebuilt APKs Update\n\n"
          declare -A sources=(
            ["Via"]="https://viayoo.com/"
            ["DotGallery"]="https://github.com/IacobIonut01/Gallery/releases"
            ["DuckDuckGo"]="https://github.com/duckduckgo/Android/releases"
            ["Keyboard"]="https://github.com/FossifyOrg/Keyboard/releases"
            ["GooglePhotosReVanced"]="https://github.com/j-hc/revanced-magisk-module/releases"
            ["MusicReVanced"]="https://github.com/j-hc/revanced-magisk-module/releases"
            ["SpotifyReVanced"]="https://github.com/j-hc/revanced-magisk-module/releases"
            ["YouTubeReVanced"]="https://github.com/j-hc/revanced-magisk-module/releases"
            ["ReVancedMicroG"]="https://github.com/ReVanced/GmsCore/releases"
          )
          for apk in *_v*.apk; do
            APP=$(echo "$apk" | cut -d'_' -f1)
            VER=$(echo "$apk" | sed -E "s/.*_v(.*)\.apk/\1/")
            SIZE=$(du -h "$apk" | cut -f1)
            SRC=${sources[$APP]}
            NOTES+="- **$APP**: v$VER • $SIZE ([source]($SRC))\n"
          done
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # ---- Create GitHub Release ----
      - name: Create GitHub Release
        if: env.UPDATED_APPS != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: prebuilts-${{ github.run_id }}
          name: "Prebuilts Update - $(date +'%Y-%m-%d %H:%M')"
          body: ${{ env.RELEASE_NOTES }}
          files: |
            *_v*.apk
        env:
          GITHUB_TOKEN: ${{ env.ACCESS_TOKEN }}

      # ---- Telegram upload ----
      - name: Upload to Telegram
        if: env.UPDATED_APPS != ''
        run: |
          for apk in *_v*.apk; do
            APP=$(echo "$apk" | cut -d'_' -f1)
            VER=$(echo "$apk" | sed -E "s/.*_v(.*)\.apk/\1/")
            CAPTION="$APP updated to v$VER"
            curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendDocument" \
              -F chat_id=${{ env.TELEGRAM_CHAT_ID }} \
              -F document=@$apk \
              -F caption="$CAPTION"
          done
